#!/usr/bin/env lua
--
-- PlanetaLibre - An Atom feed aggregator for Gemini written in Lua.
--
-- Copyright (C) 2021-2022 - Ricardo García Jiménez <ricardogj08@riseup.net>
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

local socket = require('socket')
socket.url = require('socket.url')
local ssl = require('ssl')
require('feedparser')

--- Configuración por defecto.
local config = {
  capsule = 'PlanetaLibre',
  domain = 'localhost',
  footer = 'footer.gmi',
  header = 'header.gmi',
  input = 'feeds.txt',
  lang = 'es',
  output = '.',
  timeout = 3,
  port = 1965,
  ssl = {
    mode = 'client',
    protocol = 'tlsv1_2',
    verify = 'none'
  },
  scheme = 'gemini',
  limit = 64
}

--- Muestra un mensaje de ayuda.
local function shelp()
  print([[
PlanetaLibre 3.0 - An Atom feed aggregator for Gemini written in Lua.

Synopsis:
  planetalibre [OPTIONS]

Options:
  -c <STRING> - Capsule name [default: PlanetaLibre].
  -d <DOMAIN> - Capsule domain name [default: localhost].
  -f <FILE>   - Footer to the homepage [default: footer.gmi].
  -h <FILE>   - Header to the homepage [default: header.gmi].
  -i <FILE>   - File to read a Gemini feed URLs list [default: feeds.txt].
  -l <LANG>   - Capsule content language [default: es].
  -o <PATH>   - Output directory [default: .].]])
  os.exit()
end

--- Opciones de uso.
local function usage()
  local option,param
  for i=1,#arg,2 do
    option = arg[i]
    param = arg[i + 1] or shelp()
    if option == '-c' then
      config.capsule = param
    elseif option == '-d' then
      config.domain = param
    elseif option == '-f' then
      config.footer = param
    elseif option == '-h' then
      config.header = param
    elseif option == '-i' then
      config.input = param
    elseif option == '-l' then
      config.lang = param
    elseif option == '-o' then
      config.output = param
    else
      shelp()
    end
  end
end

--- Realiza una petición a un host remoto Gemini
--- y obtiene el contenido de un feed de Atom o RSS.
-- @param url string: URL Gemini del feed de Atom o RSS.
-- @return string, nil or 1: Cuerpo del feed de Atom o RSS.
local function request(url)
  -- Segmenta la URL a una tabla.
  local parsed_url = socket.url.parse(url)
  -- Valida la URL.
  if not (parsed_url and parsed_url.host) then
    return 1
  end
  -- Crea un socket TCP maestro.
  local conn = assert(socket.tcp())
  -- Define el tiempo máximo de espera por bloque
  -- en modo no seguro (segundos).
  conn:settimeout(config.timeout)
  -- Transforma el socket maestro a cliente
  -- para conectarse a un host remoto.
  if not conn:connect(parsed_url.host, config.port)
  then
    return conn:close()
  end
  -- Configura una conexión segura.
  conn = ssl.wrap(conn, config.ssl)
  if not conn then
    return conn:close()
  end
  -- Establece el nombre del servidor remoto
  -- al cual conectarse.
  conn:sni(parsed_url.host)
  -- Define el tiempo máximo de espera por bloque
  -- en modo seguro (segundos).
  conn:settimeout(config.timeout)
  -- Transforma a una conexión segura.
  if not conn:dohandshake() then
    return conn:close()
  end
  local req = socket.url.build({
    scheme = config.scheme,
    host = parsed_url.host,
    port = config.port,
    path = parsed_url.path
  })
  -- Solicita el archivo XML del feed de Atom o RSS.
  if not conn:send(req.."\r\n") then
    return conn:close()
  end
  -- Ignora la cabecera de respuesta.
  if not conn:receive("*l") then
    return conn:close()
  end
  -- Obtiene el cuerpo de la respuesta.
  local res = conn:receive("*a")
  -- Cierra el socket TCP cliente.
  conn:close()
  return res
end

--- Mensaje de éxito.
-- @param url string: URL Gemini del feed de Atom o RSS.
local function success(url)
  print('[ok] '..url)
end

--- Mensaje de fallos.
-- @param url string: URL Gemini del feed de Atom o RSS.
local function fail(url)
  print('[fail] '..url)
end

--- Obtiene el cuerpo de los feeds de Atom
--- o RSS Gemini desde una lista de URLs.
-- @return table: Una tabla con el cuerpo de los feeds de Atom o RSS.
local function getFeeds()
  print('==== Scanning Gemini feed URLs ====')
  local file = assert(io.open(config.input))
  local feeds,url,body = {}
  -- Itera sobre cada línea del archivo.
  for line in file:lines() do
    -- Elimina espacios de principio y fin.
    url = line:match("^%s*(.-)%s*$")
    -- Obtiene el cuerpo de un feed de Atom o RSS.
    body = request(url)
    if body and body ~= 1 then
      table.insert(feeds, {url = url, body = body})
      success(url)
    else
      fail(url)
    end
  end
  file:close()
  return feeds
end

--- Obtiene los posts de los feeds de Atom o RSS.
-- @param feeds table: Una tabla con el cuerpo de los feeds de Atom o RSS.
-- @return table: Una tabla con los posts de los feeds de Atom o RSS.
local function getPosts(feeds)
  print('==== Validating feeds syntax ====')
  local posts = {}
  local parsed_feed,capsule,title,link,date
  -- Itera sobre cada feed de Atom o RSS.
  for _,feed in ipairs(feeds) do
    -- Convierte el feed de Atom o RSS a una tabla.
    parsed_feed = feedparser.parse(feed.body)
    if parsed_feed and parsed_feed.feed.title then
      capsule = parsed_feed.feed.title
      -- Itera sobre cada entrada del feed de Atom o RSS.
      for _,entry in ipairs(parsed_feed.entries) do
        title,link = entry.title,entry.link
        date = entry.updated_parsed
        -- El título, el link y la fecha
        -- de la entrada son obligatorios.
        if title and link and date then
          link = socket.url.parse(link)
          table.insert(posts, {
            capsule = capsule,
            title = title,
            link = socket.url.build({
              scheme = config.scheme,
              host = link.host,
              port = config.port,
              path = link.path
            }),
            date = date
          })
        end
      end
      success(feed.url)
    else
      fail(feed.url)
    end
  end
  -- Ordena los post por fecha.
  table.sort(posts, function(a,b)
    return a.date > b.date
  end)
  return posts
end

--- Genera el sitio web y el feed de Atom Gemini de PlanetaLibre.
-- @param posts table: Una tabla con los posts de los feeds de Atom o RSS.
local function render(posts)
  print('==== Generating homepage and Atom feed ====')
  local index = assert(io.open(config.output..'/index.gmi', "w+"))
  local atom = assert(io.open(config.output..'/atom.xml', "w+"))
  local fdate = '%Y-%m-%dT%H:%M:%SZ'
  local pdate = '%F'
  local timestamp,date = 0
  -- Añade un header en index.gmi.
  local header = io.open(config.header)
  if header then
    index:write(header:read("*a"))
    header:close()
  end
  -- URL Gemini del feed de Atom de PlanetaLibre.
  local id = socket.url.build({
    scheme = config.scheme,
    host = config.domain,
    port = config.port,
    path = '/atom.xml'
  })
  -- URL Gemini del homepage de PlanetaLibre.
  local homepage = socket.url.build({
    scheme = config.scheme,
    host = config.domain,
    port = config.port,
    path = '/index.gmi'
  })
  -- Genera el encabezado del feed de Atom de PlanetaLibre.
  atom:write(string.format([[
<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="%s">
<id>%s</id>
<title>%s</title>
<updated>%s</updated>
<author>
  <name>%s</name>
</author>
<link rel="self" href="%s" type="application/atom+xml"/>
<link rel="alternate" href="%s" type="text/gemini"/>
<generator uri="https://github.com/ricardogj08/planetalibre" version="3.0">PlanetaLibre</generator>
]], config.lang, id, config.capsule, os.date(fdate), config.capsule, id, homepage))
  -- Itera sobre cada post.
  for itr,post in ipairs(posts) do
    -- Agrega una entrada al feed de Atom de PlanetaLibre.
    atom:write(string.format([[
<entry>
  <id>%s</id>
  <title>%s</title>
  <updated>%s</updated>
  <author>
    <name>%s</name>
  </author>
  <link rel="alternate" href="%s" type="text/gemini"/>
</entry>
]], post.link, post.title, os.date(fdate, post.date), post.capsule, post.link))
    date = os.date(pdate, post.date)
    -- Agrupa las publicaciones por día.
    if timestamp ~= date then
      timestamp = date
      index:write("\n## "..timestamp.."\n\n")
    end
    -- Agrega un post en index.gmi.
    index:write("=> "..post.link.." "..post.capsule.." - "..post.title.."\n")
    if itr == config.limit then
      break
    end
  end
  index:write("\n")
  atom:write("</feed>\n")
  atom:close()
  -- Añade un footer en index.gmi.
  local footer = io.open(config.footer)
  if footer then
    index:write(footer:read("*a"))
    footer:close()
  end
  index:close()
end

local function main()
  usage()
  render(getPosts(getFeeds()))
end

main()
